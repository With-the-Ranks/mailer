import type { Contact } from "@/types/contact";

const firstNames = [
  "John",
  "Jane",
  "Michael",
  "Sarah",
  "David",
  "Emily",
  "Robert",
  "Jessica",
  "William",
  "Ashley",
  "James",
  "Amanda",
  "Christopher",
  "Stephanie",
  "Daniel",
  "Melissa",
  "Matthew",
  "Nicole",
  "Anthony",
  "Elizabeth",
  "Mark",
  "Helen",
  "Donald",
  "Deborah",
  "Steven",
  "Dorothy",
  "Paul",
  "Lisa",
  "Andrew",
  "Nancy",
  "Joshua",
  "Karen",
  "Kenneth",
  "Betty",
  "Kevin",
  "Sandra",
  "Brian",
  "Donna",
  "George",
  "Carol",
  "Edward",
  "Ruth",
  "Ronald",
  "Sharon",
  "Timothy",
  "Michelle",
  "Jason",
  "Laura",
  "Jeffrey",
  "Sarah",
  "Ryan",
  "Kimberly",
  "Jacob",
  "Deborah",
  "Gary",
  "Dorothy",
  "Nicholas",
  "Lisa",
  "Eric",
  "Nancy",
  "Jonathan",
  "Karen",
  "Stephen",
  "Betty",
  "Larry",
  "Helen",
  "Justin",
  "Sandra",
  "Scott",
  "Donna",
  "Brandon",
  "Carol",
  "Benjamin",
  "Ruth",
  "Samuel",
  "Sharon",
  "Gregory",
  "Michelle",
  "Alexander",
  "Laura",
  "Patrick",
  "Sarah",
  "Frank",
  "Kimberly",
  "Raymond",
  "Deborah",
  "Jack",
  "Dorothy",
  "Dennis",
  "Lisa",
  "Jerry",
  "Nancy",
  "Tyler",
  "Karen",
  "Aaron",
  "Betty",
  "Jose",
  "Helen",
  "Henry",
  "Sandra",
];

const lastNames = [
  "Smith",
  "Johnson",
  "Williams",
  "Brown",
  "Jones",
  "Garcia",
  "Miller",
  "Davis",
  "Rodriguez",
  "Martinez",
  "Hernandez",
  "Lopez",
  "Gonzalez",
  "Wilson",
  "Anderson",
  "Thomas",
  "Taylor",
  "Moore",
  "Jackson",
  "Martin",
  "Lee",
  "Perez",
  "Thompson",
  "White",
  "Harris",
  "Sanchez",
  "Clark",
  "Ramirez",
  "Lewis",
  "Robinson",
  "Walker",
  "Young",
  "Allen",
  "King",
  "Wright",
  "Scott",
  "Torres",
  "Nguyen",
  "Hill",
  "Flores",
  "Green",
  "Adams",
  "Nelson",
  "Baker",
  "Hall",
  "Rivera",
  "Campbell",
  "Mitchell",
  "Carter",
  "Roberts",
  "Gomez",
  "Phillips",
  "Evans",
  "Turner",
  "Diaz",
  "Parker",
  "Cruz",
  "Edwards",
  "Collins",
  "Reyes",
  "Stewart",
  "Morris",
  "Morales",
  "Murphy",
  "Cook",
  "Rogers",
  "Gutierrez",
  "Ortiz",
  "Morgan",
  "Cooper",
  "Peterson",
  "Bailey",
  "Reed",
  "Kelly",
  "Howard",
  "Ramos",
  "Kim",
  "Cox",
  "Ward",
  "Richardson",
  "Watson",
  "Brooks",
  "Chavez",
  "Wood",
  "James",
  "Bennett",
  "Gray",
  "Mendoza",
  "Ruiz",
  "Hughes",
  "Price",
  "Alvarez",
  "Castillo",
  "Sanders",
  "Patel",
  "Myers",
  "Long",
  "Ross",
  "Foster",
  "Jimenez",
];

const cities = [
  "Springfield",
  "Franklin",
  "Greenville",
  "Bristol",
  "Fairview",
  "Salem",
  "Madison",
  "Georgetown",
  "Arlington",
  "Ashland",
  "Burlington",
  "Manchester",
  "Oxford",
  "Milford",
  "Clayton",
  "Auburn",
  "Dayton",
  "Lexington",
  "Riverside",
  "Cleveland",
  "Dover",
  "Hudson",
  "Kingston",
  "Mount Vernon",
  "Newport",
  "Fairfield",
  "Troy",
  "Warren",
  "Centerville",
  "Lebanon",
  "Midway",
  "Marion",
  "Lincoln",
  "Jackson",
  "Monroe",
  "Washington",
  "Franklin",
  "Clinton",
  "Chester",
  "Greenwood",
];

const organizations = [
  "Community Center",
  "Local Library",
  "School District",
  "Fire Department",
  "Police Department",
  "City Hall",
  "Chamber of Commerce",
  "Rotary Club",
  "Lions Club",
  "VFW Post",
  "American Legion",
  "Senior Center",
  "Youth Center",
  "Food Bank",
  "Homeless Shelter",
  "Animal Shelter",
  "Environmental Group",
  "Neighborhood Watch",
  "PTA",
  "Volunteer Fire Dept",
  "Red Cross",
  "Habitat for Humanity",
  "United Way",
  "YMCA",
  "YWCA",
  "Boys & Girls Club",
  "Girl Scouts",
  "Boy Scouts",
  "4-H Club",
  "Garden Club",
  "Historical Society",
  "Arts Council",
  "Theater Group",
];

const tags = [
  "volunteer",
  "voter",
  "phone-bank",
  "canvassing",
  "digital-outreach",
  "fundraising",
  "event-planning",
  "social-media",
  "data-entry",
  "translation",
  "transportation",
  "childcare",
  "elderly-care",
  "environment",
  "education",
  "healthcare",
  "housing",
  "immigration",
  "veterans",
  "youth",
  "seniors",
  "disabilities",
  "lgbtq",
  "women",
  "minorities",
  "rural",
  "urban",
  "suburban",
  "student",
  "retiree",
  "working-parent",
  "small-business",
  "union-member",
  "religious",
  "secular",
  "progressive",
  "moderate",
  "conservative",
  "independent",
  "democrat",
  "republican",
  "green",
  "libertarian",
];

const voterStatuses = [
  "Registered",
  "Newly Registered",
  "Unregistered",
  "Moved",
  "Inactive",
];
const priorities = ["High", "Medium", "Low"];
const precincts = [
  "01-A",
  "01-B",
  "02-A",
  "02-B",
  "03-A",
  "03-B",
  "04-A",
  "04-B",
  "05-A",
  "05-B",
  "06-A",
  "06-B",
  "07-A",
  "07-B",
  "08-A",
  "08-B",
  "09-A",
  "09-B",
  "10-A",
  "10-B",
];

function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function getRandomElements<T>(array: T[], count: number): T[] {
  const shuffled = [...array].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function generateRandomContact(id: number): Contact {
  const firstName = getRandomElement(firstNames);
  const lastName = getRandomElement(lastNames);
  const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@email.com`;
  const city = getRandomElement(cities);
  const organization =
    Math.random() > 0.3 ? getRandomElement(organizations) : "";
  const contactTags = getRandomElements(
    tags,
    Math.floor(Math.random() * 4) + 1,
  ).join(",");

  const baseDate = new Date(2024, 0, 1);
  const randomDays = Math.floor(Math.random() * 365);
  const createdDate = new Date(
    baseDate.getTime() + randomDays * 24 * 60 * 60 * 1000,
  );
  const updatedDate = new Date(
    createdDate.getTime() +
      Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000,
  );

  return {
    id: id.toString(),
    email,
    firstName,
    lastName,
    phone:
      Math.random() > 0.2
        ? `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, "0")}`
        : undefined,
    note:
      Math.random() > 0.4
        ? `${getRandomElement([
            "Active volunteer, available weekends",
            "Registered voter, interested in environmental issues",
            "Potential volunteer, works in healthcare",
            "Young voter, college student",
            "Community leader, owns local business",
            "Bilingual volunteer, helps with outreach",
            "Retired teacher, available for phone banking",
            "Small business owner, supports local issues",
            "Parent volunteer, available evenings",
            "Senior citizen, needs transportation assistance",
          ])}. ${getRandomElement([
            "Has experience with phone banking and door-to-door canvassing.",
            "Prefers email communication.",
            "Available for evening events and weekend activities.",
            "Active on social media, good for digital outreach campaigns.",
            "Influential in the neighborhood, good for endorsements.",
            "Very reliable and dedicated.",
            "Interested in environmental and education issues.",
            "Works flexible hours, can volunteer during day.",
            "Has transportation, can help with voter drives.",
            "Speaks multiple languages, helps with diverse communities.",
          ])}`
        : undefined,
    tags: contactTags,
    defaultAddressCompany: organization,
    defaultAddressAddress1: `${Math.floor(Math.random() * 9999) + 1} ${getRandomElement(
      [
        "Main Street",
        "Oak Avenue",
        "Elm Street",
        "Park Road",
        "First Avenue",
        "Second Street",
        "Maple Drive",
        "Cedar Lane",
        "Pine Street",
        "Washington Avenue",
        "Lincoln Road",
        "Jefferson Street",
      ],
    )}`,
    defaultAddressAddress2:
      Math.random() > 0.7
        ? `${getRandomElement(["Apt", "Suite", "Unit"])} ${Math.floor(Math.random() * 50) + 1}${getRandomElement(["", "A", "B", "C"])}`
        : undefined,
    defaultAddressCity: city,
    defaultAddressProvinceCode: "IL",
    defaultAddressCountryCode: "US",
    defaultAddressZip: `627${String(Math.floor(Math.random() * 100)).padStart(2, "0")}`,
    defaultAddressPhone:
      Math.random() > 0.6
        ? `+1-555-${String(Math.floor(Math.random() * 10000)).padStart(4, "0")}`
        : undefined,
    customFields: {
      voterStatus: getRandomElement(voterStatuses),
      precinct: getRandomElement(precincts),
      priority: getRandomElement(priorities),
      lastContact: createdDate.toISOString().split("T")[0],
      ...(Math.random() > 0.5 && {
        volunteerHours: String(Math.floor(Math.random() * 100)),
      }),
      ...(Math.random() > 0.6 && {
        profession: getRandomElement([
          "Teacher",
          "Healthcare",
          "Retail",
          "Construction",
          "Technology",
          "Finance",
          "Government",
          "Non-profit",
          "Student",
          "Retired",
          "Self-employed",
          "Manufacturing",
          "Transportation",
        ]),
      }),
      ...(Math.random() > 0.7 && {
        languages: getRandomElement([
          "English",
          "English,Spanish",
          "English,French",
          "English,German",
          "English,Chinese",
          "English,Arabic",
          "English,Russian",
          "English,Portuguese",
          "English,Italian",
        ]),
      }),
      ...(Math.random() > 0.8 && {
        issues: getRandomElements(
          [
            "Environment",
            "Education",
            "Healthcare",
            "Housing",
            "Transportation",
            "Economy",
            "Immigration",
            "Veterans",
            "Seniors",
            "Youth",
            "Disabilities",
            "Civil Rights",
          ],
          Math.floor(Math.random() * 3) + 1,
        ).join(","),
      }),
    },
    createdAt: createdDate.toISOString().split("T")[0],
    updatedAt: updatedDate.toISOString().split("T")[0],
  };
}

export const mockContacts: Contact[] = Array.from({ length: 100 }, (_, i) =>
  generateRandomContact(i + 1),
);
